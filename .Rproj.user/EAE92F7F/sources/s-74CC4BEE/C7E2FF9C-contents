---
title: "Initial observations on the 2021 Myanmar Food Security Cluster 5Ws"
author: "Myanmar Food Security Cluster"
date: "04/02/2022"
output:
  html_document:
    code_download: yes
    theme: readable
    toc: yes
    toc_depth: 4
    toc_float: yes
    number_sections: no
    collapsed: no
always_allow_html: yes
---

```{css, echo=FALSE}

#TOC::before {
  content: "";
  display: block;
  height: 70px;
  margin: 2em 20px 40px 20px;
  background-image: url("Myanmar_cluster_blue.png");
  background-size: contain;
  background-position: center center;
  background-repeat: no-repeat;
}
```

```{=html}
<style>
    body .main-container {
        max-width: 1280px;
    }
</style>
```


## setup


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)


theme_set(theme_light())

# disabling scientific notation
options(scipen = 100)

# pander tables all in one row
panderOptions('table.split.table', Inf)

# pander thousands separator
panderOptions("big.mark", ",")

# replace 
opts <- options(knitr.kable.NA = "")

`%out%` <- Negate(`%in%`)

# function for transposing df
transpose_df <- function(df) {
  t_df <- data.table::transpose(df)
  colnames(t_df) <- rownames(df)
  rownames(t_df) <- colnames(df)
  t_df <- t_df %>%
    tibble::rownames_to_column(.data = .) %>%
    tibble::as_tibble(.)
  return(t_df)
}

# function beneficiary summaries
sum_ben <- function(df, column_var){
  
  column_var <- enquo(column_var)
  
  df %>%
    group_by(!!column_var) %>% # must add bang-bang
    summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>% 
    arrange(desc(beneficiaries))
    
}

# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
  
  column_var1 <- enquo(column_var1)
  column_var2 <- enquo(column_var2)
  
  df %>%
    group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
    summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE))
    
}

# scaling functions 
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}

#mode function 
mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

pcode4 <- read_excel("2022_FSCMYA_5W_template.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>% 
  select(admin1pcode_9:admin1_3) %>% 
  rename(admin1_pcode = admin1pcode_9,
         state = state_10, 
         township = township_11,
         admin3_pcode = admin3pcode_12, 
         vt_town = vt_and_town_13, 
         admin4_pcode = vt_and_town_pcode_14)
 
villages <- read_excel("2022_FSCMYA_5W_template.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>%
  select(admin1pcode_17:location_type) %>% 
  rename(admin1_pcode = admin1pcode_17,
         state = state_18, 
         township = township_19,
         admin3_pcode = admin3pcode_20, 
         vt_town = vt_and_town_21, 
         admin4_pcode = vt_and_town_pcode_22)

camps <- read_excel("2022_FSCMYA_5W_template.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>%
  select(township = township_29, camp_name, pcode_camp = p_code_camp)

industrial_zones <- read_excel("2022_FSCMYA_5W_template.xlsx", 
           sheet = "GEOADMINS") %>% 
  clean_names() %>% 
  select(state = state_36, admin1_pcode = admin1pcode_37, industrial_zone = industrial_zones)

fsc <- read_csv("fsc_codes.csv") %>% 
  rename_all(~str_replace_all(., "^number_of_", "")) %>%
  rename_all(~str_replace_all(., "^number_", "")) %>%
  rename(specify_location = specify_location_if_the_the_location_is_not_in_the_list) %>% 
  mutate(idp_camp_site_name= as.character(idp_camp_site_name)) %>% 
  mutate(location = case_when(!is.na(idp_camp_site_name) ~ idp_camp_site_name,
                              !is.na(village_ward) ~ village_ward,
                              !is.na(specify_location) ~ specify_location,
                              !is.na(village_tract_town) ~ village_tract_town)) %>%
  mutate(date = my(month_of_implementation)) %>% 
  rename(activity = fsc_main_activity) %>% 
  mutate(township = recode(township, "Putao" = "Puta-O"), 
         admin3_pcode = ifelse(township == "Puta-O", "MMR001014", admin3_pcode)) %>% 
  left_join(pcode4 %>% select(township, vt_town, admin3_pcode, admin4_pcode, admin1_pcode), by = 
              c("village_tract_town" = "vt_town", "township" = "township", 
                "admin3_pcode" = "admin3_pcode", "admin1_pcode" = "admin1_pcode")) %>% 
  mutate(total_value_usd = case_when(currency == "MMK" ~ total_value / 1776, 
                                     currency == "USD" ~ total_value)) %>% 
  rename(state = state_region) %>% 
  mutate(admin3_pcode_old = case_when(admin3_pcode %in% c("MMR013046", "MMR013047") ~ "MMR013008", 
                                  admin3_pcode == "MMR015202" ~ "MMR015022",
                                  admin3_pcode == "MMR015315" ~ "MMR015010", 
                                  admin3_pcode == "MMR015312" ~ "MMR015006",	
                                  admin3_pcode == "MMR015308" ~ "MMR015007",
                                  admin3_pcode == "MMR016321" ~ "MMR016003", 
                                  TRUE ~ admin3_pcode)) %>% 
  # removing a duplicate entry from the left join 
  mutate(drop = case_when(admin4_pcode == "MMR007008058" ~ 1, TRUE ~ 0)) %>% 
  rename(response_plan = response_plan_if_project_under_fts, 
         beneficiaries = reached_beneficiaries, 
         households = reached_households) %>% 
  filter(drop != 1) %>% select(-drop) %>% 
  replace_na(list(new_beneficiaries = 0)) %>% 
  mutate(activity_red = case_when(activity %in% c("food distributions (in kind/voucher/cash), moderate", 
                                                  "food distributions (in kind/voucher/cash), severe") ~ 
                                    "food distribution",
                                  activity %in% c("multi-purpose cash transfer (MPC), moderate",
                                                  "multi-purpose cash transfer (MPC), severe") ~ 
                                    "multi-purpose cash transfer",
                                  activity == "livelihoods vocational training" ~ "vocational training",
                                  activity == "food/cash for work/assets" ~ "food_cash for work_assets",
                                  activity == "income-generating activities and small grants" ~ "IGA and small grants", 
                                  TRUE ~ activity), 
         activity_red = str_remove_all(activity_red, "provision of ")) %>%
  mutate(strat_obj = case_when(activity_red %in% c("food distribution", "multi-purpose cash transfer") &
                                 beneficiary_type == "Internally Displaced" ~ 
                          "so_1", 
                        activity_red %in% c("food distribution", "multi-purpose cash transfer") & 
                          beneficiary_type != "Internally Displaced" ~ 
                          "so_2", 
                        TRUE ~ "so_3")) %>% 
   # these partners did not provide the numbers of households
  mutate(households = ifelse(is.na(households), beneficiaries, households)) %>% 
  mutate(usd_per_hhd = total_value_usd / households, 
         usd_per_person = total_value_usd / beneficiaries) %>% 
  mutate(usd_hhd_bin = case_when(usd_per_hhd < 10 ~ "<$10",
                     usd_per_hhd >= 10 & usd_per_hhd < 20 ~ ">=$10_<$20",
                     usd_per_hhd >= 20 & usd_per_hhd < 30 ~ ">=$20_<$30",
                     usd_per_hhd >= 30 & usd_per_hhd < 40 ~ ">=$30_<$40",
                     usd_per_hhd >= 40 & usd_per_hhd < 50 ~ ">=$40_<$50",
                     usd_per_hhd >= 50 & usd_per_hhd < 60 ~ ">=$50_<$60",
                     usd_per_hhd >= 60 & usd_per_hhd < 70 ~ ">=$60_<$70",
                     usd_per_hhd >= 70 & usd_per_hhd < 80 ~ ">=$70_<$80",
                     usd_per_hhd >= 80 & usd_per_hhd < 90 ~ ">=$80_<$90",
                     usd_per_hhd >= 90 & usd_per_hhd < 100 ~ ">=$90_<$100",
                     usd_per_hhd >= 100 ~ ">=$100",
                     TRUE ~ NA_character_),
         usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$30", ">=$30_<$40", ">=$40_<$50",">=$50_<$60", 
                                                  ">=$60_<$70", ">=$70_<$80", ">=$80_<$90",">=$90_<$100",">=$100"))) %>% 
  mutate(usd_person_bin = case_when(usd_per_person < 2 ~ "<$2",
                                 usd_per_person >= 2 & usd_per_person < 4 ~ ">=$2_<$4",
                                 usd_per_person >= 4 & usd_per_person < 6 ~ ">=$4_<$6",
                                 usd_per_person >= 6 & usd_per_person < 8 ~ ">=$6_<$8",
                                 usd_per_person >= 8 & usd_per_person < 10 ~ ">=$8_<$10",
                                 usd_per_person >= 10 & usd_per_person < 12 ~ ">=$10_<$12",
                                 usd_per_person >= 12 & usd_per_person < 14 ~ ">=$12_<$14",
                                 usd_per_person >= 14 & usd_per_person < 16 ~ ">=$14_<$16",
                                 usd_per_person >= 16 & usd_per_person < 18 ~ ">=$16_<$18",
                                 usd_per_person >= 18 & usd_per_person < 20 ~ ">=$18_<$20",
                                 usd_per_person >= 20 ~ ">=$20",
                     TRUE ~ NA_character_), 
         usd_person_bin = fct_relevel(usd_person_bin, c("<$2", ">=$2_<$4", ">=$4_<$6", ">=$6_<$8", ">=$8_<$10",">=$10_<$12", 
                                                  ">=$12_<$14", ">=$14_<$16", ">=$16_<$18", ">=$18_<$20",">=20"))) %>% 
  mutate(location_type = recode(location_type, "village" = "Village"))
 
  
pin <- read_csv("fs_pin.csv") %>% 
  select(-admin1_pcode) %>% 
  left_join(pcode4 %>% distinct(admin1_pcode, state), by = "state")


fsc_2021 <- read_csv("fsc5w_2021.csv") %>%
  mutate(activity_new = 
           case_when(str_detect(activity_description, "Local Chicken support") ~
                       "provision of livestock kits",
                     activity == "Cash for Work / Food for Assets" ~
                       "food/cash for work/assets",
                     str_detect(activity_description, "home|Home") & 
                       !str_detect(activity_description, "training|Training|Training,") ~
                       "provision of kitchen garden kits",
                     activity == "Provide crops & vegetables kits" & 
                       str_detect(activity_description, "pumps|till|drum|Tiller|Drum") ~ 
                       "provision of community infrastructure and equipment",
                     activity == "Provide crops & vegetables kits" ~ 
                       "provision of crop, vegetable and seed kits",
                     activity == "Provide fishery kits" ~ 
                       "provision of fishery kits",
                     activity == "Provide livestock kits" ~ 
                       "provision of livestock kits",
                     activity %in% c("Provide monthly cash-based transfers", "Provide monthly food baskets") & 
                       str_detect(activity_description, "Lifesaving|lifesaving|acute|Acute") ~ 
                       "food distributions (in kind/voucher/cash), severe",
                     # what to do about MVC, malnourished children and PLW?
                     activity %in% c("Provide monthly cash-based transfers", "Provide monthly food baskets")  ~
                       "food distributions (in kind/voucher/cash), moderate",  
                     activity == "Provide support for income generation" & 
                       !str_detect(activity_description, "agriculture input|farming") ~
                       "income-generating activities and small grants",
                     activity  == "Provide support for income generation"  ~
                       "income-generating activities and small grants",
                     activity == "Provide technical training" & str_detect(activity_description,
                                               "farm|Farm|FFS|pesticide|ferti|agri|Agri|gardening|Seed|seed|SSA") ~
                       "FFS and farmer training",
                     activity == "Provide technical training" ~ "vocational training",
                     activity_description %in% c("Provide Voucher Cards to buy agriculture inputs for their agricultural works",
                                                 "Cash for farming (Livestock and Agri)") ~
                       "provision of crop, vegetable and seed kits", 
                     TRUE ~ NA_character_)) %>% 
   mutate(activity_red = case_when(activity_new %in% c("food distributions (in kind/voucher/cash), moderate",
                                                   "food distributions (in kind/voucher/cash), severe") ~
                                     "food distribution",
                                  activity_new %in% c("multi-purpose cash transfer (MPC), moderate",
                                                  "multi-purpose cash transfer (MPC), severe") ~ 
                                    "multi-purpose cash transfer",
                                  activity == "livelihoods vocational training" ~ "vocational training",
                                  activity == "food/cash for work/assets" ~ "food_cash for work_assets",
                                  activity == "income-generating activities and small grants" ~ "IGA and small grants",
                                  TRUE ~ activity_new)) %>% 
  mutate(strat_obj = case_when(activity_red %in% c("food distribution", "multi-purpose cash transfer") & 
                          beneficiary_type == "Internally Displaced" ~ 
                          "so_1", 
                        activity_red %in% c("food distribution", "multi-purpose cash transfer") & 
                          beneficiary_type != "Internally Displaced" ~ 
                          "so_2", 
                        TRUE ~ "so_3")) %>% 
  mutate(activity_red = recode(activity_red, 
                                       "food/cash for work/assets" = "food_cash for work_assets", 
                                       "provision of crop, vegetable and seed kits" = "crop, vegetable and seed kits",
                                       "provision of livestock kits" = "livestock kits",
                                       "income-generating activities and small grants" = "IGA and small grants"), 
         activity_red = str_remove_all(activity_red, "provision of "))

# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
  rename(state = ST, 
        admin1_pcode = ST_PCODE,
        township = TS,
        admin3_pcode = TS_PCODE) %>% 
 mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))

pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>% 
 rename(state = ST, 
        admin1_pcode = ST_PCODE) %>% st_as_sf()
```



```{r}
fsc %>% 
  group_by(admin3_pcode_old) %>% 
  summarise(beneficiaries = sum(new_beneficiaries),
            partners = n_distinct(org_code)) %>% 
  right_join(fs_pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>% 
  replace_na(list(beneficiaries = 0)) %>% 
  mutate(reached_pc = beneficiaries / fs_targeted,
         reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
         fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
         fs_targeted = round(fs_targeted, digits = 0)) %>% 
  arrange(desc(reached_pc)) %>% 
  group_by(group) %>% 
  summarise(beneficiaries = sum(beneficiaries),
            fs_targeted = sum(fs_targeted)) %>% 
  mutate(pc_reached = round(beneficiaries / fs_targeted * 100, digits = 2), 
         pc_beneficiaries = round(beneficiaries / sum(beneficiaries) * 100, digits = 2),
         pc_target = round(fs_targeted / sum(fs_targeted) * 100, digits = 2)) %>% 
  select(group, beneficiaries, `%_beneficiaries` = pc_beneficiaries, target = fs_targeted, 
         `%_target` = pc_target, `%_reached` = pc_reached) %>% 
  kable(caption = "2022 Q1 Beneficiaries and percent reached by prioritisation group", 
        format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped")
```


## Summary of achievements

Beneficiaries of humanitarian action formed `r round(filter(fsc, humanitarian_or_development == "Humanitarian") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / sum(fsc$new_beneficiaries, na.rm = TRUE) * 100, digits = 2)`% of all beneficiaries in the first quarter of 2022. 

To recall, the Food Security Cluster's strategic objectives for 2022 are: 

* SO1: IDPs have equitable access to sufficient, safe and nutritious food (either in-kind or through food assistance)
* SO2: Vulnerable persons (excl. IDPs) have equitable access to sufficient, safe and nutritious food (either in-kind or through food assistance)
* SO3: Restore, protect and improve livelihoods and resilience 

```{r}
fsc %>% 
  sum_ben2(strat_obj, humanitarian_or_development) %>% 
  ungroup() %>%
  pivot_wider(names_from = humanitarian_or_development, values_from = beneficiaries, values_fill = 0) %>% 
  mutate(strat_obj = fct_relevel(strat_obj, levels = c("so_1", "so_2", "so_3")), 
         Total = Development + Humanitarian) %>% 
  adorn_totals("row") %>% 
  kable(caption = "2022 beneficiaries by strategic objective", format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped", full_width = FALSE)


```

In terms of activities, the number of beneficiaries reached is heavily skewed towards food distributions. More than 95% of beneficiaries in 2022 have been reached by this activity. 

```{r table-beneficiaries-activity}
fsc %>%  
  sum_ben2(strat_obj, activity_red) %>% 
  arrange(desc(beneficiaries)) %>% 
  pivot_wider(names_from = strat_obj, values_from = beneficiaries, values_fill = 0, names_prefix = "ben_") %>% 
  mutate(Total = ben_so_1 + ben_so_2 + ben_so_3, 
         `%_ben` = round(Total / sum(Total) * 100, digits = 2)) %>% 
  relocate(ben_so_1, .after = activity_red) %>% 
  rename(activity = activity_red) %>% 
  kable(caption = "Breakdown of beneficiaries by activity", format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped")
```

57% of beneficiaries were reached by activities where nutrition was mainstreamed. This is highly encouraging. As the year progresses, it will be important to collect more details about how exactly nutrition has been mainstreamed so that coordination with the Nutrition Cluster may be improved. 

```{r}
fsc %>% 
  mutate(was_nutrition_mainstreamed_in_activity = ifelse(is.na(was_nutrition_mainstreamed_in_activity), 
                                                         "No", was_nutrition_mainstreamed_in_activity), 
         was_nutrition_mainstreamed_in_activity = fct_relevel(was_nutrition_mainstreamed_in_activity, levels = c("Yes", "No"))) %>% 
  sum_ben2(strat_obj, was_nutrition_mainstreamed_in_activity) %>% 
  pivot_wider(names_from = strat_obj, values_from = beneficiaries) %>% 
  mutate(Total_ben = so_1 + so_2 + so_3, 
         `%_ben` = round(Total_ben / sum(Total_ben) * 100, digits = 2)) %>% 
  kable(caption = "Breakdown of benefeciaries by status of nutrition mainstreaming", format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped")
  
```


## Geographies

### Statewise breakdowns

As in 2021, the number of beneficiaries reached has been heavily biased towards relatively few areas, which is not appropriate for a unionwide response. A total of `r distinct(fsc, admin3_pcode) %>% nrow()` townships have been reached across `r distinct(fsc, admin1_pcode) %>% nrow()` states/regions. 

<br> 

```{r barplot-state-region}
fsc %>% 
  group_by(state, admin1_pcode) %>% 
  summarise(beneficiaries = sum(new_beneficiaries), .groups = "drop") %>% 
  ungroup() %>% 
  left_join(pin %>% group_by(admin1_pcode) %>% summarise(target = sum(fs_targeted, na.rm = TRUE)),
            by = "admin1_pcode") %>% 
  mutate(state = fct_reorder(state, -beneficiaries),
         pc_reached = beneficiaries / target) %>%
  arrange(desc(pc_reached)) %>% 
  ggplot(aes(x = state, y = beneficiaries, fill = pc_reached)) + 
  geom_col() +
  geom_text(aes(label = comma(beneficiaries)), size = 2, vjust = -1) +
  scale_y_continuous(labels = comma) +
  scale_fill_viridis(labels = percent, direction = -1, option = "mako") +
  theme(axis.text.x = element_text(angle = 30, vjust = 0.7)) +
  labs(x = "", y = "Beneficiaries", fill = "% of\ntarget",
       title = "Number of beneficiaries reached by state, Food Security Cluster",
       subtitle = "and percentage of target reached") 

# ggsave("by_state_q1_2022.png", dpi = 300, height = 5, width = 8, units = "in")
```

<br>

The table below outlines the number of beneficiaries reached by state/region in both 2021 and 2022. In 2021, the response was heavily skewed towards Yangon and Rakhine. The bias is even more pronounced in 2022. As will be discussed in the next section, this is a misallocation of resources as many of the areas reached in Yangon and Rakhine are already heavily oversubscribed and the reach is multiple times the target. 

A fill `r round(filter(fsc, state %in% c("Yangon", "Rakhine")) %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / sum(fsc$new_beneficiaries, na.rm = TRUE) * 100, digits = 2)`% of beneficiaries reached in the first quarter of 2022 originated from Yangon or Rakhine. 


```{r table-statewise-comparison-21-22}
state_ord <- fsc %>% 
  group_by(state, admin1_pcode) %>% 
  summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>% 
  arrange(desc(beneficiaries)) %>% 
  rbind(tribble(~state, ~admin1_pcode, ~beneficiaries,
                "Ayeyarwady", NA_character_, NA_real_,
                "Magway", NA_character_, NA_real_,
                "Mandalay", NA_character_, NA_real_))

state_ord_2021 <- fsc_2021 %>% 
  filter(unique_beneficiaries == "Yes") %>% 
  group_by(state, admin1_pcode) %>% 
  mutate(admin1_pcode = ifelse(state == "Tanintharyi", "MMR006", admin1_pcode)) %>%
  summarise(beneficiaries = sum(beneficiaries)) %>% 
  left_join(fsc %>% 
              group_by(admin1_pcode) %>%
              summarise(beneficiaries_2022 = sum(new_beneficiaries, na.rm = TRUE)),
            by = "admin1_pcode") %>% 
  arrange(desc(beneficiaries_2022))

fsc %>% 
  group_by(state, humanitarian_or_development) %>% 
  summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop") %>% 
  pivot_wider(names_from = humanitarian_or_development, values_from = beneficiaries) %>%
  rowwise() %>% 
  mutate(beneficiaries = sum(Humanitarian, Development, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(pc_2022 = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>% 
  right_join(fsc_2021 %>% 
              filter(unique_beneficiaries == "Yes") %>% 
              group_by(state) %>%
              summarise(beneficiaries_2021 = sum(beneficiaries)) %>%
              mutate(pc_2021 = round(beneficiaries_2021 / sum(beneficiaries_2021) * 100, digits = 2)),
            by = "state") %>% 
  arrange(desc(pc_2022)) %>% 
  select(State = state, Beneficiaries_2021 = beneficiaries_2021, `%_ben_2021` = pc_2021, 
         Beneficiaries_2022 = beneficiaries, `%_ben_2022` = pc_2022) %>% 
  kable(caption = "Skew in Q1 2022 geographic reach, comparison with 2021 data", format.args = list(big.mark = ",")) %>%
  column_spec(3, color = "white", background = spec_color(state_ord_2021$beneficiaries[1:16], end = 0.8, direction = -1)) %>%
  column_spec(5, color = "white", background = spec_color(state_ord$beneficiaries[1:16], end = 0.8, direction = -1)) %>%
  kable_classic_2("striped")

  
  
```

<br><br>

### Township-level breakdowns

Just 8 townships (listed in the table below) contained `r round((1 - tsp_ord %>% adorn_percentages("col") %>% filter(township == "55 other townships") %>% pull(beneficiaries)) * 100, digits = 2)`% of all beneficiaries. In contrast, in 2021, the top 10 townships contained 76% of all beneficiaries. Hlaingthayra East and West by themselves contained 36% of all beneficiaries reached. 



```{r table-top-townships}
tsp_ord <- fsc %>%
  group_by(township) %>% 
  summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>% 
  mutate(township = case_when(beneficiaries <= 30215 ~ "55 other townships", 
                              TRUE ~ township)) %>% 
  group_by(township) %>% 
  summarise_all(.funs = sum) %>% arrange(desc(beneficiaries))

fsc %>%  
  group_by(state, township, humanitarian_or_development) %>% 
  summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop") %>% 
  mutate(humanitarian_or_development = str_to_lower(humanitarian_or_development)) %>%
  pivot_wider(names_from = humanitarian_or_development, values_from = beneficiaries) %>% 
  rowwise() %>% 
  mutate(beneficiaries = sum(development, humanitarian, na.rm = TRUE)) %>% 
  mutate(township = case_when(beneficiaries <= 30215 ~ "55 other townships", 
                              TRUE ~ township), 
         state = case_when(beneficiaries <= 30215 ~ NA_character_, 
                              TRUE ~ state)) %>% 
  group_by(state, township) %>% 
  summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
            humanitarian = sum(humanitarian, na.rm = TRUE),
            development = sum(development, na.rm = TRUE), .groups = "drop") %>% 
  mutate(pct_of_total = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>% 
  arrange(desc(pct_of_total)) %>% 
  select(State = state, Township = township, Humanitarian = humanitarian, Development = development,
         Beneficiaries = beneficiaries, `%_Total` = pct_of_total) %>% 
  kbl(caption = "Top 7 townships by beneficiaries reached (desc)", format.args = list(big.mark = ",")) %>% 
  column_spec(6, color = "white", background = spec_color(tsp_ord$beneficiaries[1:8], end = 0.8, direction = -1)) %>%
  kable_classic_2(lightable_options = c("striped")) %>% 
  footnote("The 55 other townships are each less than 1.5% of the total", 
           general_title = "")
 

```

<br><br>

### Locations 

A location refers to either an village, ward, IDP site or industrial zone. 

This first plot below is a histogram of location, by number of beneficiaries. The vast majority of locations have only one activity occurring within them. This is something to be monitored over the course of the year, as it is assumed that a range of activities are required to comprehensively meet the food security and livelihoods needs of targeted communities. As it currently stands, the response is very broad, with little depth. 

<br> 

```{r}
fsc %>% 
  filter(!is.na(location)) %>% 
  group_by(location, township) %>%  
  summarise(beneficiaries = sum(beneficiaries), 
            activities = n_distinct(activity, .groups = "drop")) %>% 
  arrange(desc(activities)) %>% 
  ggplot(aes(x = beneficiaries)) +
  geom_histogram(binwidth = 0.1) +
  scale_x_continuous(labels = comma, trans = "log10") +
  facet_wrap(~ activities) +
  labs(y = "number of locations",
       x = "Beneficiary frequencies per location", 
       title = "Histograms of number of beenficiaries by location",
       subtitle = "Faceted by number of FSC activities per location")
```
<br>

This second plot of locations is faceted by the number of partners -- this helps us check for potential overlaps. There are quite a large number of locations with 2 partners in them. Locations with multiple partners were from Rakhine, Kachin and Shan (North). 

<br>

```{r histogram-locations-by-partner}

fsc %>% 
  filter(!is.na(location)) %>% 
  group_by(location, township) %>%  
  summarise(beneficiaries = sum(beneficiaries), 
            partners = n_distinct(org_code), .groups = "drop") %>% 
  arrange(desc(partners)) %>% 
  ggplot(aes(x = beneficiaries)) +
  geom_histogram(binwidth = 0.1) +
  scale_x_continuous(labels = comma, trans = "log10") +
  facet_wrap(~ partners) +
  labs(y = "number of locations",
       x = "beneficiaries per location", 
       title = "Histograms of beneficiaries by location",
       subtitle = "Faceted by number of partners per location")

```

<br>

The greatest number of beneficiaries came from urban/peri-urban wards and villages. This runs counter to vulnerability patterns identified by in both the IFPRI Household Welfare Survey and the FAO-WFP Food Security Survey. Both surveys found that rural households were less food secure and less resilient than urban ones. 

```{r table-context-breakdown}
fsc %>% 
  filter(!is.na(location_type)) %>% 
  group_by(rural_or_urban, location_type) %>% 
  summarise(locations = n(), 
            beneficiaries = sum(new_beneficiaries), .groups = "drop") %>%
  mutate(`%_of_ben` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2),
         ben_per_location = round(beneficiaries / locations)) %>% 
  kable(caption = "Breakdown of locations and beneficiaries by context", 
        format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped")
```


## Activities

### Progress by Activity 

The first red line below shows the the approval of the IERP in June 2021 and the second red line shows the start of 2022. 

<br>

```{r progress-facet-lineplot}
fsc %>% 
  group_by(date, activity_red) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  rbind(fsc_2021 %>% 
          filter(unique_beneficiaries == "Yes") %>%
          group_by(date, activity_red) %>% 
          summarise(beneficiaries = sum(beneficiaries))) %>% 
  group_by(activity_red) %>% 
  arrange(date) %>% 
  mutate(cum_ben = cumsum(beneficiaries)) %>% 
  arrange(activity_red) %>% 
  mutate(activity_red = str_replace_all(activity_red, "provision of ", "")) %>%
  ggplot(aes(x = date, y = cum_ben, colour = activity_red)) +
  geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = 0.5) +
  geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = 0.5) +
  geom_line(size = 0.7) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b") +
  scale_y_continuous(labels = comma) +
  facet_wrap(~ activity_red, scales = "free_y") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 5, angle = 60)) + # see if this works when you knit, then do it for the other plots 
  labs(x = "Month", 
       y = "Cumulative beneficiaries", 
       title = "Monthly progress by activity, 2021-2022",
       subtitle = "Figures are in cumulative unique beneficiaries reached") + 
  theme(plot.title = element_text(size = 12))
  

```

<br>

Community infrastructure and equipment, fishery kits and kitchen garden kits have not been implemented in 2022. 

Food distributions (in-kind and CBT/CVA) continued to be the largest activity from 2021 into 2022.

```{r}
fsc %>% 
  group_by(location, township, activity) %>% 
  slice(which.max(beneficiaries)) %>%
  group_by(strat_obj, activity_red) %>% 
  summarise(beneficiaries = sum(beneficiaries), .groups = "drop") %>% 
  mutate(pc = beneficiaries / sum(beneficiaries))
```

<br><br>

### delivery modalities

```{r}
fsc %>% 
  filter(!is.na(delivery_modality)) %>% 
  mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid", 
                                       str_detect(delivery_modality, "Service") ~ "Service delivery", 
                                       TRUE ~ delivery_modality)) %>% 
  group_by(activity_red, delivery_modality) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  ggplot(aes(x = delivery_modality, y = beneficiaries, fill = activity_red)) + 
  geom_col() +
  scale_fill_discrete(guide = "none") +
  scale_y_continuous(labels = comma) + 
  facet_wrap(~ activity_red, scales = "free_y") +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 0.8))


```


```{r}
# not useful at the moment
fsc %>%  
  filter(!is.na(delivery_modality)) %>% 
  group_by(org_code, delivery_modality) %>%
  summarise(beneficiaries = sum(beneficiaries)) %>% 
  mutate(pc = beneficiaries / sum(beneficiaries)) %>% 
  ggplot(aes(x = pc, y = delivery_modality, colour = delivery_modality)) + 
  geom_jitter()
```



```{r}
fsc %>% filter(activity %in%  c("food distributions (in kind/voucher/cash), severe", 
                                "food distributions (in kind/voucher/cash), moderate")) %>% 
  group_by(activity, food_insecurity_status) %>% 
  summarise(beneficiaries = sum(new_beneficiaries))

fsc %>% 
  filter(food_insecurity_status == "Severely food insecure") %>% 
  count(evidence)

fsc %>% 
  filter(food_insecurity_status == "Moderately food insecure") %>% 
  count(evidence)

fsc %>% count(evidence, wt = new_beneficiaries) %>% 
  rename(beneficiaries = n) %>% 
  mutate(evidence = ifelse(str_detect(evidence, "food consumption"), "food consumption score", evidence),
         pc = beneficiaries / sum(beneficiaries))

fsc %>% 
  count(food_insecurity_status, wt = new_beneficiaries) %>% 
  rename(beneficiaries = n) %>% 
  mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
```




```{r}
fsc %>% 
  filter(activity == "provision of kitchen garden kits")

fsc %>% count(activity_red)
```

## Cash-based transfers

```{r}

fsc %>%
  filter(!is.na(usd_per_hhd) & !is.na(new_beneficiaries)) %>% 
  filter(delivery_modality %in% c("CBT/CVA", "Hybrid (In-kind & CBT/CVA)")) %>%
  group_by(usd_hhd_bin) %>% 
  summarise(households = sum(households)) %>% 
  mutate(`%_of_hhd` = round(households / sum(households) * 100, digits = 2)) %>% 
  ggplot(aes(x = usd_hhd_bin, y = households, fill = usd_hhd_bin)) + 
  geom_col() + 
  geom_text(aes(label = `%_of_hhd`), vjust = -0.4, size = 3) + 
  scale_fill_viridis_d(option = "mako", direction = -1) + 
  scale_y_continuous(labels = comma, breaks = seq(0, 80000, by = 10000)) + 
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 30, hjust = 0.8, vjust = 0.9)) +
  labs(x = "USD value of cash transfer per household per month",
       y = "Number of households",
       title = "Number of households by value of cash transfer per household (2022 1Q)",
       subtitle = "Figures at the top of each bar show percentage of households\nOnly households reached through the cash, hybrid or voucher modalities are included")
  

```


```{r table-usd-values-activity}
avg_transfer_value <- fsc %>%
  filter(delivery_modality %in% c("CBT/CVA", "Hybrid (In-kind & CBT/CVA)")) %>%
  group_by(activity_red) %>% 
  summarise(hhd_frequencies = round(sum(households, na.rm = TRUE)),
            total_value_usd = round(sum(total_value_usd, na.rm = TRUE))) %>% 
  mutate(avg_transfer_value = round(total_value_usd / hhd_frequencies, digits = 2)) %>% 
  rename(activity = activity_red) %>% 
  arrange(desc(avg_transfer_value)) 

avg_transfer_value %>%  
  kable(caption = "Average value (USD) of household package values per activity", 
        format.args = list(big.mark = ",")) %>% 
  kable_classic_2(lightable_options = "striped") %>% 
  column_spec(4, color = "white", background = spec_color(avg_transfer_value$avg_transfer_value[1:7], end = 0.8, direction = -1)) %>%
  footnote(general = "Only households which were reached by cash, hybrid or voucher modalities are included", 
           general_title = "")
# pander(caption = "Average value (USD) of household package values per activity")

```


```{r}
partner_mean_usd <- function(tbl, name){

  tbl %>% 
    filter(!is.na(new_beneficiaries) & !is.na(usd_per_hhd)) %>%
    filter(delivery_modality %in% c("CBT/CVA", "Hybrid (In-kind & CBT/CVA)")) %>%
    filter(activity_red == {{name}}) %>%
    mutate(households = ifelse(activity_red == "food distribution", 
                                       beneficiaries, 
                                       households)) %>% 
    group_by(org_code) %>% 
    summarise(total_value_usd = sum(total_value_usd),
              beneficiaries = sum(new_beneficiaries), 
              households = sum(households)) %>% 
    mutate(mean_usd = total_value_usd / households) %>% 
    arrange(desc(beneficiaries)) %>%  
    top_n(7) %>% 
    mutate(org_code = fct_reorder(org_code, beneficiaries)) %>% 
    ggplot(aes(x = mean_usd, y = org_code, fill = beneficiaries)) + 
    scale_x_continuous(labels = comma_format(accuracy = 1)) + 
    scale_fill_viridis(option = "mako", direction = -1, begin = 0.2, 
                       labels = number_format(scale = 1 / 1000, suffix = "K", accuracy = 1)) +
    geom_col() +
    geom_text(aes(label = dollar(mean_usd)), size = 2, hjust = "inward") + 
    theme(axis.text.y = element_text(size = 7)) +
  labs(x = "Average USD value of package per transfer", 
       y = "") +
    theme(legend.title = element_text(size = 3.5),
          legend.text = element_text(size = 3.5), 
          plot.title = element_text(size = 10, face = "bold"),
          axis.title.x = element_text(size = 8))
}

fsc %>% partner_mean_usd("food distribution") +
  labs(title = "Food distributions (per person)") +
fsc %>% partner_mean_usd("food_cash for work_assets") + 
  labs(title = "Food/cash for work/assets (per hhd)") + 
fsc %>% partner_mean_usd("multi-purpose cash transfer") +
  labs(title = "Multi-purpose cash transfer (per hhd)") + 
fsc %>% partner_mean_usd("IGA and small grants") +
  labs(title = "IGA and small grants (per hhd)")

fsc %>% filter(org_code == "org_3486" & activity == "food/cash for work/assets") %>% 
  pull(beneficiaries)
  
```

### scatterplot per person values 

```{r boxplot-activity-usd-per-person}

fsc %>% filter(!is.na(total_value_usd) & activity_red != "livestock kits") %>%
  ggplot(aes(y = activity_red, x = usd_per_person, colour = activity_red)) + 
  geom_jitter(alpha = .1, aes(size = beneficiaries)) +
  geom_boxplot(alpha = .8) + 
  scale_x_continuous(trans = "log10", breaks = c(0, 1, 3, 10, 30, 100, 300)) +
  theme(legend.position = "none") +
  labs(x = "USD per person", y = "", 
       title = "Boxplots of USD transfer values per person", 
       subtitle = "Thick line in each box is the mean;\n Points are individual distributions, sizes of points reflect beneficiaries")
 
```

<br>

Overall, food for work/cash for assets has the largest dispersion in the per person values of its transfers, with one cluster largely below USD 5/person in Sagaing and another of between USD 30 and USD 60 per person in Kachin and Shan North. The activity with the tightest range was crop, vegetable and seed kits -- the value per person of this activity is almost entirely between USD 15 and USD 25/person.

Food distribution, being the largest activity, had 

<br>

```{r}
money_scatter <- fsc %>% 
  filter(!is.na(total_value_usd) & activity_red != "livestock kits") %>%
  group_by(state, township, location, org_code, activity_red) %>% 
  summarise(beneficiaries = sum(beneficiaries), 
            total_value_usd = sum(total_value_usd), 
            rounds = n_distinct(date)) %>% 
  mutate(per_person = round(total_value_usd / beneficiaries, digits = 2)) %>% 
  filter(total_value_usd > 0) %>%
  ggplot(aes(x = beneficiaries, y = per_person, colour = activity_red, 
             text = paste0(org_code, "\n", 
                           activity_red, "\n", 
                           "ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
                           "USD per person: ", dollar(per_person), "\n", 
                           "total value: ", dollar(total_value_usd, accuracy = 1), "\n", 
                           "rounds: ", rounds, "\n", 
                           township, ", ", state))) + 
  geom_jitter(aes(size = beneficiaries), alpha = .5) + 
  scale_y_continuous(trans = "log10", breaks = c(0, 1, 3, 10, 30, 100, 300), labels = dollar_format(accuracy = 1)) + 
  scale_x_continuous(trans = "log10", labels = comma, breaks = c(0, 10, 100, 1000, 10000, 100000, 300000)) + 
  scale_size_continuous(guide = "none") + 
  labs(x = "Beneficiary frequencies", 
       y = "USD transfer value per person", 
       title = "Average USD transfer value per person", 
       subtitle = "By organisation, location and activity", 
       colour = "") + 
  theme(legend.text = element_text(size = 5)) + 
  guides(colour = guide_legend(override.aes = list(size = 1, alpha = 1)))

ggplotly(money_scatter, tooltip = c("text")) %>% 
  layout(title = list(text = paste0("Average USD transfer value per person",
                                    "<br>",
                                    "<sup>",
                                    "By organisation, location and activity; double-click on legend to select","</sup>")))


```



### A closer look at food distributions

```{r plotly-food-dist-range}

food_dist_range <- fsc %>% 
  filter(!is.na(usd_per_person)) %>%
  filter(activity_red == "food distribution" & usd_per_person < 60) %>% 
  ggplot(aes(x = usd_per_person, y = state, colour = state, 
             text = paste0(org_code, "\n", 
                           activity_red, "\n", 
                           "ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
                           "USD per person: ", dollar(usd_per_person), "\n", 
                           "total value: ", dollar(total_value_usd, accuracy = 1), "\n",
                           township, ", ", state))) + 
  geom_jitter(alpha = 0.3, aes(size = beneficiaries)) +
  scale_colour_viridis_d() +
  scale_size_continuous(range = c(0.5, 10)) +
  scale_x_continuous(breaks = seq(0, 90, by = 10)) +
  labs(x = "USD value per person", 
       y = "", 
       title = "Food distribution: range of USD values per person",
       size = "", colour = "") 

ggplotly(food_dist_range, tooltip = c("text")) %>% 
  layout(title = list(text = paste0("Food distribution: range of USD values per person",
                                    "<br>",
                                    "<sup>",
                                    "range of USD values per person; double-click on legend to select","</sup>")))
```





```{r}
fsc %>% filter(org_code == "org_2825" & activity_red == "food distribution") %>% 
  group_by(location) %>% 
  summarise(total_value_usd = sum(total_value_usd), 
            beneficiaries = sum(beneficiaries)) %>% 
  mutate(per_person = total_value_usd / beneficiaries)

fsc %>% 
  filter(!is.na(total_value_usd)) %>% 
  group_by(location, org_code, date, activity_red) %>% 
  summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE), 
            total_value_usd = sum(total_value_usd, na.rm = TRUE)) %>% 
  group_by(location, org_code, activity_red) %>% 
  summarise(beneficiaries = sum(beneficiaries), 
            total_value_usd = sum(total_value_usd), 
            rounds = n()) %>% 
  group_by(org_code, activity_red) %>%  
  summarise(beneficiaries = sum(beneficiaries), 
            total_value_usd = sum(total_value_usd), 
            rounds = round(mean(rounds), digits = 2))
```



```{r}

fsc %>% 
  group_by(org_code, activity_red) %>% 
  summarise(total_value_usd = sum(total_value_usd, na.rm = TRUE),
            beneficiaries = sum(beneficiaries, na.rm = TRUE), 
            households = sum(households, na.rm = TRUE)) %>% 
  mutate(per_person = round(total_value_usd / beneficiaries, digits = 2), 
         per_hhd = total_value_usd / households, 
         activity_red = str_remove_all(activity_red, "provision of ")) %>% 
  filter(total_value_usd > 0) %>%
  ggplot(aes(x = beneficiaries, y = per_person, colour = activity_red)) + 
  geom_point() + 
  scale_y_continuous(trans = "log10", breaks = c(0, 1, 3, 10, 30, 100, 300)) + 
  scale_x_continuous(trans = "log10", labels = comma) +
  facet_wrap(~activity_red, scales = "free")
```




```{r}
fsc %>% 
  filter(!is.na(new_beneficiaries) & !is.na(total_value_usd) &
           activity_red == "food distribution") %>% 
  filter(state == "Kayah")
  ggplot(aes(x = usd_per_hhd)) +
  geom_histogram()
  group_by(state) %>% 
  summarise(beneficiaries = sum(new_beneficiaries),
            total_value_usd = sum(total_value_usd),
            mode = mode(usd_per_hhd),
            min = min(usd_per_hhd),
            max = max(usd_per_hhd)) %>% 
  mutate(mean_usd = total_value_usd / beneficiaries) %>% 
  arrange(desc(mean_usd))
  
fsc %>% 
  filter(!is.na(new_beneficiaries) & !is.na(total_value_usd) &
           activity_red == "food distribution") %>% 
  group_by(org_code) %>% 
  summarise(beneficiaries = sum(new_beneficiaries),
            total_value_usd = sum(total_value_usd),
            rows = n(), 
            mode = mode(usd_per_hhd)) %>% 
  mutate(mean_usd = total_value_usd / beneficiaries) %>% 
  arrange(mean_usd)
```






```{r table-meb-usd-hhd-bin}
cbt_bins <- fsc %>% filter(activity_red %in% c("food distribution", "multi-purpose cash transfer") &
                             !is.na(usd_per_hhd) &
                             !is.na(new_beneficiaries)) %>%
  count(usd_hhd_bin, wt = households) %>% 
  mutate(pc_of_total = round(n / sum(n) * 100, digits = 2))

fsc %>% 
  filter(activity_red %in% c("food distribution", "multi-purpose cash transfer") &
                             !is.na(usd_per_hhd) &
                             !is.na(new_beneficiaries)) %>%
  mutate(pc_meb = usd_per_hhd / 114.55) %>% 
  group_by(usd_hhd_bin) %>% 
  summarise(avg_pc_of_meb = round(median(pc_meb) * 100, digits = 2),
            avg_usd_month = round(median(usd_per_hhd, na.rm = TRUE), digits = 2),
            households = round(sum(households))) %>% 
  mutate(pc_of_hhd = round(households / sum(households) * 100, digits = 2)) %>% 
  kable(caption = "Monthly cash-based transfer values by percentage of MEB received", format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped") %>% 
  column_spec(5, color = "white", background = spec_color(cbt_bins$pc_of_total[1:11], end = 0.9, direction = -1)) %>%
  footnote(general = "Only households reached through monthly cash-based transfers are included",
           general_title = "")
# pander(caption = "Monthly cash-based transfer values by percentage of MEB received")

```


## Beneficiaries type


```{r}
fsc %>% 
  group_by(beneficiary_type) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  mutate(beneficiary_type = fct_reorder(beneficiary_type, -beneficiaries)) %>% 
  ggplot(aes(x = beneficiary_type, y = beneficiaries, fill = beneficiary_type)) + 
  geom_col() +
  geom_text(aes(label = comma(beneficiaries)), size = 3, vjust = -0.5) +
  scale_y_continuous(labels = comma) +
  scale_fill_discrete(guide = "none") +
  labs(x = "Beneficiary type",
       y = "Number of beneficiaries", 
       subtitle = "Persons reached by beneficiary type")

# ggsave("beneficiary_type_q1_2022.png", dpi = 300, height = 5, width = 8, units = "in")
```

### Evidence of food insecurity status 

```{r}
fsc %>%
  filter(str_detect(activity, "moderate|severe")) %>% 
  mutate(has_evidence = ifelse(is.na(evidence), "no", "yes")) %>% 
  group_by(activity, has_evidence) %>% 
  summarise(beneficiaries = sum(beneficiaries)) %>% 
  group_by(activity) %>% 
  mutate(pc_of_beneficiaries = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
  group_by(activity) %>% 
  summarise(beneficiaries = sum(beneficiaries), 
            total_value_usd = sum(total_value_usd)) %>% 
  mutate(per_person = total_value_usd / beneficiaries)

fsc %>% 
  filter(activity == "multi-purpose cash transfer (MPC), severe" & !is.na(total_value_usd)) %>% 
  group_by(evidence) %>% 
  summarise(beneficiaries = sum(beneficiaries))
  sample_n(10) %>% 
  pull(evidence)
  
fsc %>% 
  mutate(evidence = ifelse(str_detect(evidence, "food consumption score"), "food consumption score", evidence)) %>% 
  group_by(evidence) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
```



## Partners

```{r}
# i don't know how useful this is, probably best to have it as a DT

cbind(
fsc %>% 
  filter(strat_obj == "so_1") %>% 
  group_by(org_code) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  arrange(desc(beneficiaries)) %>%
  rename(`Partners, SO1` = org_code, 
         beneficiaries_SO1 = beneficiaries) %>% 
  head(10), 

fsc %>% 
  filter(strat_obj == "so_2") %>% 
  group_by(org_code) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  arrange(desc(beneficiaries)) %>%
  rename(`Partners, SO2` = org_code, 
         beneficiaries_SO2 = beneficiaries) %>% 
  head(10),

fsc %>% 
  filter(strat_obj == "so_3") %>% 
  group_by(org_code) %>% 
  summarise(beneficiaries = sum(new_beneficiaries)) %>% 
  arrange(desc(beneficiaries)) %>%
  rename(`Partners, SO3` = org_code, 
         beneficiaries_SO3 = beneficiaries) %>% 
  head(10)
) %>% 
  kable(caption = "Top 10 implementing partners by beneficiaries reached, by HRP indicator", format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped", full_width = FALSE, position = "left") %>%  
  footnote(general = "Figures reflect beneficiaries reached through direct implementation",
           general_title = "")
  
```

```{r}

partner_scatter <- fsc %>%  
  group_by(org_code) %>% 
  summarise(states = n_distinct(state), 
            townships = n_distinct(admin3_pcode), 
            beneficiaries = sum(new_beneficiaries)) %>% 
  ggplot(aes(x = beneficiaries, y = townships, text = org_code)) + 
  geom_point(aes(size = beneficiaries), alpha = .7) + 
  scale_x_continuous(trans = "log", labels = comma, breaks = c(0, 100, 300, 1000, 3000, 10000, 100000, 300000)) +
  scale_y_continuous(breaks = seq(0, 25, 5)) +
  labs(x = "Number of beneficiaries",
       y = "Number of townships",
       title = "Plot of beneficiaries and townships reached, by implementing partner") +
  theme(legend.position = "none")

ggplotly(partner_scatter) %>%
  config(displayModeBar = FALSE) %>% 
  layout(title = list(text = paste0("Plot of beneficiaries and townships reached, by implementing partner",
                                    "<br>", 
                                    "<sup>",
                                    "mouse over for details",
                                    "</sup>")))
```


### top partners by beneficiaries reached in 2022

```{r}
fsc %>%
  select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>% 
  rbind(fsc_2021 %>% 
          filter(unique_beneficiaries == "Yes") %>% 
          select(date, org_code, beneficiaries, location, admin3_pcode)) %>% 
  group_by(location, admin3_pcode) %>% 
  slice(which.max(beneficiaries)) %>% 
  mutate(cum_ben = )


  group_by(org_code, year = year(date)) %>% 
  summarise(beneficiaries = sum(beneficiaries)) %>%
  pivot_wider(names_from = year, values_from = beneficiaries, names_prefix = "ben_") %>% 
  rowwise() %>% 
  mutate(total_ben = sum(ben_2021, ben_2022, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(rank_2021 = dense_rank(-ben_2021), 
         rank_2022 = dense_rank(-ben_2022)) %>% 
  arrange(desc(ben_2022)) %>% 
  select(org_code, ben_2021, rank_2021, ben_2022, rank_2022, total_ben) %>% 
  head(20) %>% 
  kable(caption = "Top implementing partners by beneficiaries reached in 2022", format.args = list(big.mark = ",")) %>% 
  kable_classic_2("striped") 
```



In 2021, it was noted that whilst there was much variation in the numbers of beneficiaries reached by each implementing partner, their geographic footprints were quite limited. This pattern has continued into 2022. Only `r fsc %>% group_by(org_code) %>% summarise(townships = n_distinct(admin3_pcode)) %>% filter(townships > 5) %>% nrow()` partners (17% of the total) have a presence in more than 5 townships. The distribution of partners remains an impediment to the implmentation of a countrywide response. And the following steps mentioned in the 2021 report are still very necessary: 

* Incentivise partners to expand their footprints

* Identify new partners to reach vulnerable persons in areas recently affected by conflict

* Encourage donors to support expansion of Food Security activities in areas recently affected by conflict (with sufficient support costs)

### monthly progress by partners

```{r}

partner_top <- fsc %>% 
  sum_ben(org_code) %>% arrange(desc(beneficiaries)) %>%  mutate(org_code = reorder(org_code, -beneficiaries)) %>% pull(org_code) %>% head(20)

fsc %>%
  filter(org_code %in% partner_top) %>%
  select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>% 
  rbind(fsc_2021 %>% 
          filter(unique_beneficiaries == "Yes") %>% 
          filter(org_code %in% partner_top) %>% 
          select(date, org_code, beneficiaries, location, admin3_pcode)) %>% 
  group_by(location, admin3_pcode) %>% 
  slice(which.max(beneficiaries)) %>% 
  group_by(org_code) %>% 
  arrange(date) %>% 
  mutate(cum_ben = cumsum(beneficiaries)) %>% 
  ggplot(aes(x = date, y = cum_ben)) +
  geom_line(size = 0.5) + 
  scale_x_date(date_breaks = "1 month", date_labels = "%b") +
  scale_y_continuous(labels = comma) +
  geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01"))) +
  geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01"))) +
  facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 3.5, angle = 60),
        axis.text.y = element_text(size = 4),
        strip.text = element_text(size = 4.5, face = "bold")) + # see if this works when you knit, then do it for the other plots 
  labs(x = "Month", 
       y = "Cumulative beneficiaries", 
       title = "Monthly progress of top 20 implementing partners, 2021-2022", 
       subtitle = "Figures show cumulative unique beneficiaries") + 
  theme(plot.title = element_text(size = 11))


```

<br><br><br>

## Comparison with targets 

<br>

The specifics of each township can be reviewed with the interactive plot below. Each point is a township, with the size indicating the number of beneficiaries. The x-axis indicates the target population by township and the y-axis shows the number of beneficiaries reached in 2022. 

The red line down the middle represents reaching 100% of the target. Townships above this line have reached more beneficiaries than their target and townships below the line have not met their target yet. The further away a township is from the red line, the further above or below its target it is. Mouse over each of the townships to see more details. 

The townships along the extreme left side of the plot have beneficiaries but do not have targets (their targets have just been coded as $1$ so that they show up on the plot). 

<br>

```{r plotly-tsp-comparison-reached-target}

ben_target <- fsc %>% 
  group_by(admin3_pcode_old) %>% 
  summarise(beneficiaries = sum(new_beneficiaries),
            partners = n_distinct(org_code)) %>% 
  left_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>% 
  mutate(reached_pc = beneficiaries / fs_targeted,
         reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
         fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
         fs_targeted = round(fs_targeted, digits = 0)) %>% 
  arrange(desc(reached_pc)) %>% 
  select(state, township, fs_pin, fs_targeted, beneficiaries, reached_pc, partners) %>%
  ggplot(aes(x = fs_targeted, y = beneficiaries, colour = partners, 
             text = paste0(township, ",", "\n",
                           state, ",", "\n",
                           "beneficiaries: ", comma(beneficiaries, accuracy = 1), "\n",
                           "target: ", comma(fs_targeted, accuracy = 1), "\n",
                           "% of target: ", percent(reached_pc, accuracy = 2), "\n", 
                           "partners: ", partners))) + 
  geom_abline(intercept = 0, slope = 1, lty = 2, colour = "red") + 
  geom_point(aes(size = beneficiaries), alpha = 0.8) +
  scale_size_continuous(guide = "none") + 
  scale_x_continuous(trans = "log10", labels = comma) + 
  scale_y_continuous(trans = "log10", labels = comma) +
  scale_colour_viridis(direction = -1) +
  labs(x = "Targeted population", y = "Beneficiaries", 
       title = "Beneficiaries reached vs targeted population by township, Q1 2022",
       subtitle = "The red line is 100% of target")

ggplotly(ben_target, tooltip = c("text")) %>% 
  layout(title = list(text = paste0("Beneficiaries reached vs targeted population by township, Q1 2022",
                                    "<br>",
                                    "<sup>",
                                    "The red line is 100% of target; size indicates number of beneficiaries","</sup>")))

```

<br><br>

### Maps

```{r fig.height=10}
fsc %>% 
  group_by(admin3_pcode = admin3_pcode_old) %>% 
  summarise(beneficiaries = sum(beneficiaries)) %>% 
  right_join(pcode3_shape, by = c("admin3_pcode")) %>% 
  st_as_sf() %>% 
  ggplot() +
  geom_sf(aes(fill = beneficiaries), size = 0.1) +
  scale_fill_viridis_c(direction = -1, trans = "log10", 
                       breaks = c(100, 1000, 10000, 100000, 500000),
                       labels = comma) + 
  theme_void() +
  theme(legend.text = element_text(size = 10),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.7, 'cm')) +
  labs(title = "Beneficiaries by township",
       subtitle = "townships in grey do not have any partners present", 
       fill = "Beneficiaries") +

pin %>% 
  right_join(pcode3_shape, by = "admin3_pcode") %>% 
  st_as_sf() %>%  
  ggplot() + 
  geom_sf(aes(fill = fs_targeted), size = .1) + 
  scale_fill_viridis_c(direction = -1, trans = "log10",  
                       breaks = c(100, 1000, 10000, 100000, 500000),
                       limits = range(57, 801760), 
                       labels = comma) + 
  theme_void() + 
  theme(legend.text = element_text(size = 10),
          legend.title = element_text(size = 10),
          legend.key.size = unit(0.7, 'cm')) +
    labs(title = "2022 target by township",
         subtitle = "townships in grey do not food security targets", 
         fill = "target")


```


```{r}
ben %>% 
  group_by(admin3_pcode) %>% 
  summarise(partners = n_distinct(implementing_partners)) %>% 
  right_join(pcode3_shape, by = "admin3_pcode") %>% 
  st_as_sf() %>% 
  ggplot() +
  geom_sf(aes(fill = partners), size = 0.1) +
  # scale_fill_gradient(trans = "reverse", breaks = c(1, 3, 5, 7, 9,11)) +
  scale_fill_viridis_c(option = "mako", direction = -1, breaks = c(1, 3, 5, 7, 9, 11)) +
  theme_void() + 
  theme(legend.text = element_text(size = 10),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.7, 'cm')) +
  labs(title = "Map of number of partners by township",
       subtitle = "townships in grey do not have any partners present", 
       fill = "Partners") +
  
pin %>%    
    group_by(admin3_pcode) %>% 
    summarise(pin_2022 = sum(pin_2022)) %>% 
    mutate(pin_2022 = round(pin_2022, digits = 0), 
           pin_2022 = recode(pin_2022, 
                                '0' = NA_real_)) %>%
    right_join(pcode3_shape, by = "admin3_pcode") %>% 
    st_as_sf() %>% 
    ggplot() +
    geom_sf(aes(fill = pin_2022), size = 0.1) +
  scale_fill_viridis_c(option = "mako", trans = "log10", direction = -1) +
    # scale_fill_gradient(trans = revlog_trans(10), breaks = c(100, 1000, 10000, 100000)) +
    theme_void() +
    theme(legend.text = element_text(size = 10),
          legend.title = element_text(size = 10),
          legend.key.size = unit(0.7, 'cm')) +
    labs(title = "Map of 2022 PIN by township",
         subtitle = "townships in grey do not a PIN calculated", 
         fill = "PIN")
```

